
public class test {
/**

     * @param t1, t1!=null
     * @param t2, t2!=null
     * @return Retourne true si t1 et t2 ont meme longueur
     * et pour tout i tel que 0<=i<t1.length,  t1[i]==t2[i]. Sinon, retourne false.
     * Ex.: egaux({4, 8, 4}, {4, 8}) retourne false
     *      egaux({4, 8, 4}, {4, 8, 4}) retourne true
     *      egaux({4, 8, 4}, {4, 4, 8}) retourne false
     *      egaux({4, 8, 4}, {4, 8, 4, 2}) retourne false
     */
    public static boolean methode1(int[] t1, int[] t2) {
        if (t1.length != t2.length) {
            return false;
        }
        boolean id = true;
        int i =0;
        while (id && i<t1.length) {
            id = (t1[i]==t2[i]);
            i++;
        }
        return id;
    }

    /**
     * @param tab, un tableau contenant au moins un entier.
     * @param x, un entier quelconque
     * @return Retourne le nombre d’occurrences de x dans tab, c'est-a-dire le
     *  nombre de fois que l’entier x apparaît dans tab.
     *  ------------------------------------------------------------------------------------
     *  TRES IMPORTANT !!!  Votre methode doit utiliser une boucle et ne peux ni faire appel
     *  a nbOccurrencesRec ni utiliser une variante du code de nbOccurrencesRec.
     *  ------------------------------------------------------------------------------------
     * Ex.: En supposant que t soit egal a {2, 12, 4, 2, 2, 12, 6} :
     *        nbOccurrences(t,  2) retourne 3
     *        nbOccurrences(t, 12) retourne 2
     *        nbOccurrences(t,  4) retourne 1
     *        nbOccurrences(t, 22) retourne 0
     */
    public static int methode2(int[] tab, int x) {
        int occ = 0;
        for (int i = 0;i<tab.length;i++) {
            if (tab[i] == x) {
                occ = occ + 1;
            }
        }
        return occ;
    }

    }