
    public static boolean identiques(int[] t1, int[] t2) {
        if (t1.length != t2.length) {
            return false;
        }
        boolean id = true;
        int i =0;
        while (id && i<t1.length) {
            id = (t1[i]==t2[i]);
            i++;
        }
        return id;
    }

    public static int nbOccurrences(int[] tab, int x) {
        int occ = 0;
        for (int i = 0;i<tab.length;i++) {
            if (tab[i] == x) {
                occ = occ + 1;
            }
        }
        return occ;
    }

    public static int nbOccurrencesRec(int[] tab, int x) {
        return nbOccurrencesRec(tab, tab.length, x);
    }
    public static int nbOccurrencesRec(int[] tab, int pos, int x) {
        return (pos==0) ? 0 : nbOccurrencesRec(tab, pos-1, x)+(tab[pos-1]==x?1:0);
    }

    public static boolean egaux(int[] t1, int[] t2) {
        if (t1.length != t2.length) {
            return false;
        }
        int i = 0;
        boolean id = true;
        while (id && i<t1.length) {
            id = (nbOccurrencesRec(t1,t1[i])==nbOccurrencesRec(t2,t1[i]));
            i++;
        }

        return id;
    }

    public static int[] supprimerToutes(int[] tab, int x) {
        int n = tab.length - nbOccurrencesRec(tab,x);
        int[] tab2 = new int [n];
        int i = 0;
        for(int a : tab) {
            if(a!=x) {
                tab2[i] = a;
                i=i+1;
            }
        }
        return tab2;
    }

    public static int[] supprimer(int[] tab, int x) {
        int n = 0;
        if(nbOccurrencesRec(tab,x)>0) {
            n = tab.length - 1;
        }
        int[] tab2 = new int [n];
        int a = tab[0];
        int i = 1;
        int indicefinal = 0;
        while(a != x && i<tab2.length) {
            tab2[i] = a;
            a = tab[i];
            i++;
            indicefinal = i;
        }
        for(int j = indicefinal; j<tab2.length;j++) {
            tab2[j] = tab[j];
        }
        return tab2;
    }